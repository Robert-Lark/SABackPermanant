'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var React = require('react');
var core = require('@keystone-ui/core');
var fields = require('@keystone-ui/fields');
var components = require('@keystone-next/admin-ui/components');
var dateFns = require('date-fns');

/* @jsx jsx */

function formatOutput(value) {
  if (!value) return '';
  const date = new Date(value);
  return `${date.toLocaleDateString()} ${date.toLocaleTimeString()}`;
}

const Field = ({
  field,
  value,
  onChange,
  forceValidation,
  autoFocus
}) => {
  const [touched, setTouched] = React.useState(false);
  return core.jsx(fields.FieldContainer, null, core.jsx(fields.FieldLabel, null, field.label), onChange ? core.jsx(React.Fragment, null, core.jsx(fields.TextInput, {
    autoFocus: autoFocus,
    disabled: onChange === undefined,
    onChange: event => {
      onChange(event.target.value);
    },
    onBlur: () => {
      setTouched(true);
    },
    placeholder: "0000-00-00T00:00:00.000Z",
    value: value
  }), (touched || forceValidation) && !isValid(value) && core.jsx("div", {
    css: {
      color: 'red'
    }
  }, "Timestamps must be in the form 0000-00-00T00:00:00.000Z")) : formatOutput(value));
};
const Cell = ({
  item,
  field,
  linkTo
}) => {
  let value = item[field.path];
  return linkTo ? core.jsx(components.CellLink, linkTo, formatOutput(value)) : core.jsx(components.CellContainer, null, formatOutput(value));
};
Cell.supportsLinkTo = true;
const CardValue = ({
  item,
  field
}) => {
  return core.jsx(fields.FieldContainer, null, core.jsx(fields.FieldLabel, null, field.label), item[field.path]);
};

function isValid(value) {
  if (value === '') return true;

  try {
    return dateFns.parseISO(value).toISOString() === value;
  } catch (err) {
    return false;
  }
}

const controller = config => {
  return {
    path: config.path,
    label: config.label,
    graphqlSelection: config.path,
    defaultValue: '',
    deserialize: data => data[config.path] || '',
    serialize: value => ({
      [config.path]: value === '' ? null : value
    }),

    validate(value) {
      return isValid(value);
    }

  };
};

exports.CardValue = CardValue;
exports.Cell = Cell;
exports.Field = Field;
exports.controller = controller;
